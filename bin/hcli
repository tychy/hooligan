#!/bin/bash

set -eo pipefail

display_help() {
    echo "ヘルプだよ"
    echo "Usage: hooligan_cli [options] [command] file..."
    printf "\n"
    echo "Options"
    echo "  -h, --help          ヘルプを表示する"
    echo "  -v, --verbose       コンパイル時のログを出力する"
    echo "  -g, --generation    使用するコンパイラの世代を指定する。0はgcc。"
    printf "\n"
    echo "Commands"
    echo "  compile file...     指定ファイルをアセンブリファイルにコンパイルする"
    echo "  src file...         指定ファイルをアセンブリファイルにコンパイルして内容を標準出力へ出力する"
    echo "  exec file...        指定ファイルを実行ファイルにコンパイルして実行する"
    echo "  debug file...       指定ファイルを実行ファイルにコンパイルしてgdbで実行する"
    echo "  test                -gオプションで指定されたコンパイラでテストを実行する"
    echo "  test all            全てのテストを実行する"
    echo "  unittest            -gオプションで指定されたコンパイラでユニットテストを実行する"
    echo "  selfhost            -gオプションで指定されたコンパイラで次の世代のコンパイラを生成する"
    printf "\n"
    echo "Alias"
    echo "  c = compile"
    echo "  s = src"
    echo "  e = exec"
    echo "  t = test"
    echo "  ut = unittest"
    echo "  sh = selfhost"
    echo "  cl = clean"
}

clean() {
    for fn in $(find . -name '*.s'); do
        rm $fn
    done
    for fn in $(find . -name 'a.out'); do
        rm $fn
    done
    for fn in $(find . -name 'core.*'); do
        rm $fn
    done
}

clean_assembly() {
    for fn in $(find . -name '*.s'); do
        rm $fn
    done
}

COMPILER_GENERATED=0
compile() {
    clean_assembly
    generate_compiler $COMPILER_GENERATION
    if [[ COMPILER_GENERATION -eq 0 ]]; then
        gcc -masm=intel -S "$@"
    else
        if [[ VERBOSE -eq 1 ]]; then
            IS_VERBOSE=1 ./bin/hcc$COMPILER_GENERATION "$@"
        else
            ./bin/hcc$COMPILER_GENERATION "$@"
        fi
    fi
}

runtestold() {
        generate_compiler $(($COMPILER_GENERATION + 1))
    set +e
    for fn in testold/question/*; do
        i=$(basename $fn)
        qfile=testold/question/$i
        afile=testold/answer/$i
        expected="$(cat $afile)"
        compile $qfile
        find *.s | xargs cc # シンプルなテストなのでstaticをつけなくてもよい
        printf $qfile
        ./a.out
        actual="$?"
        if [ "$actual" = "$expected" ]; then
            printf "...passed\n"
        else
            printf "...failed\n"
            exit 1
        fi
    done
    set -e
}

runtest() {
    generate_compiler $(($COMPILER_GENERATION + 1))
    set +e
    for dn in $(find tests/* -type d); do
        printf $dn
        cfiles=$(find $dn/*.c)
        compile $cfiles
        find *.s | xargs cc -static -g -O0
        expectedout=$(cat $dn/out)
        stdout=$(./a.out)
        if [[ $? -eq 0 ]] && [ "$stdout" == "$expectedout" ]; then
            echo ...passed
        else
            echo ...failed
            exit 1
        fi
    done
    set -e
}

unittest() {
    generate_compiler $(($COMPILER_GENERATION + 1))
    for dn in $(find unittest/* -maxdepth 0 -type d); do
        printf $dn
        compile $dn/test.c
        find *.s | xargs cc -static -g -O0
        expectedout=$(cat $dn/stdout.txt)
        stdout=$(./a.out)
        if [[ "$stdout" == "$expectedout" ]]; then
            printf ...passed
        else
            printf ...failed
            printf "\n"
            exit 1
        fi
        printf "\n"
    done
}

# 第一引数に指定した世代のコンパイラを作成する。例：generate_compiler 2 => hcc2を吐き出す
generate_compiler() {
    if [[ COMPILER_GENERATED -eq 1 ]]; then
        return
    fi
    target_generation=$1
    for ((i = 0; i < $target_generation; i++)); do
        if [[ i -eq 0 ]]; then
            make
        else
            ./bin/hcc$i generator.c main.c parser.c preprocessor.c read_token.c scope.c tokenizer.c type.c util.c variable.c
            OUTPUT_NAME=hcc$(($i + 1))
            find *.s | xargs cc -static -o bin/$OUTPUT_NAME
        fi
    done
    COMPILER_GENERATED=1
    clean_assembly
}

selfhost() {
    generate_compiler $(($COMPILER_GENERATION + 1))
}

param=()
COMPILER_GENERATION=1
VERBOSE=0
for OPT in "$@"; do
    case $OPT in
    -h | --help)
        display_help
        exit 1
        ;;
    -v | --verbose)
        VERBOSE=1
        shift 1
        ;;
    -g | --generation)
        if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
            echo "コンパイラの世代を指定してください"
            echo "  0   gcc"
            echo "  1   hcc"
            echo "  2   hcc2"
            echo "  3   coming soon..."
        fi
        COMPILER_GENERATION=$2
        shift 2
        ;;
    -*)
        echo "不正なオプションです"
        exit 1
        ;;
    *)
        if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
            param+=("$1")
            shift 1
        fi
        ;;
    esac
done

if [ ${param[0]} = "clean" ] || [ ${param[0]} = "cl" ]; then
    printf "不要な一時ファイルを消去します..."
    for fn in $(find . -name '*.s'); do
        rm $fn
    done
    for fn in $(find . -name 'a.out'); do
        rm $fn
    done
    for fn in $(find . -name 'core.*'); do
        rm $fn
    done
    printf "done\n"
    exit 0
elif [ ${param[0]} = "compile" ] || [ ${param[0]} = "c" ]; then
    compile ${param[@]:1}
elif [ ${param[0]} = "src" ] || [ ${param[0]} = "s" ]; then
    compile ${param[@]:1}
    for fn in $(find . -name '*.s'); do
        printf "\n$(basename $fn)\n"
        cat $fn
    done
elif [ ${param[0]} = "exec" ] || [ ${param[0]} = "e" ]; then
    compile ${param[@]:1}
    find *.s | xargs cc -static -g -O0
    set +e
    ./a.out
    echo "結果: $?"
    set -e
elif [ ${param[0]} = "debug" ]; then
    compile ${@:1}
    find *.s | xargs cc -static -g -O0
    gdb a.out
elif [ ${param[0]} = "test" ] || [ ${param[0]} = "t" ]; then
    if [ ${#param[@]} -eq 2 ] && [ ${param[1]} = "all" ]; then
        runtest
        runtestold
        COMPILER_GENERATION=0 # 暫定的にunittestはgccで行うことを強制する
        unittest
    else
        runtest
    fi
elif [ ${param[0]} = "testold" ]; then
    runtestold
elif [ ${param[0]} = "unittest" ] || [ ${param[0]} = "ut" ]; then
    unittest
elif [ ${param[0]} = "selfhost" ] || [ ${param[0]} = "sh" ]; then
    selfhost
else
    echo "存在しないサブコマンドです"
    exit 1
fi
