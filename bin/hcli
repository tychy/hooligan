#!/bin/bash

set -eo pipefail

display_help() {
    echo "ヘルプだよ"
    echo "Usage: hooligan_cli [options] [command] file..."
    printf "\n"
    echo "Options"
    echo "  -h, --help          ヘルプを表示する"
    echo "  -v, --verbose       コンパイル時のログを出力する"
    echo "  -g, --generation    使用するコンパイラの世代を指定する。0はgcc。"
    printf "\n"
    echo "Commands"
    echo "  compile file...     指定ファイルをアセンブリファイルにコンパイルする"
    echo "  src file...         指定ファイルをアセンブリファイルにコンパイルして内容を標準出力へ出力する"
    echo "  exec file...        指定ファイルを実行ファイルにコンパイルして実行する"
    echo "  debug file...       指定ファイルを実行ファイルにコンパイルしてgdbで実行する"
    echo "  test                -gオプションで指定されたコンパイラでテストを実行する"
    printf "\n"
    echo "Alias"
    echo "  c = compile"
    echo "  s = src"
    echo "  e = exec"
    echo "  t = test"
    echo "  cl = clean"
}

clean() {
    make clean
}

clean_assembly() {
    find . -name '*.s' -exec rm {} +
}

COMPILER_GENERATED=0
compile() {
    clean_assembly
    generate_compiler "$COMPILER_GENERATION"
    if [[ COMPILER_GENERATION -eq 0 ]]; then
        gcc -masm=intel -S "$@"
    else
        ./bin/hcc"$COMPILER_GENERATION" "${opts[@]}" "$@"
    fi
}

generate_executable() {
    compile "$@"
    cc *.s -no-pie -g -O0 -lhooligan -L./bin
}

runtest() {
    generate_compiler "$COMPILER_GENERATION"
    for dn in $(find tests/* -maxdepth 0 -type d); do
        printf "%s" "$dn"
        cfiles=$(find "$dn"/*.c)
        generate_executable $cfiles # Quoteすると複数ファイルが一つの引数として扱われてしまう
        expectedout=$(cat "$dn"/out)
        set +e
        stdout=$(./a.out)
        if [[ $? -eq 0 ]] && [ "$stdout" == "$expectedout" ]; then
            echo ...passed
        else
            echo ...failed
            exit 1
        fi
        set -e
    done
}

# 第一引数に指定した世代のコンパイラを作成する。例：generate_compiler 2 => hcc2を吐き出す
generate_compiler() {
    if [[ COMPILER_GENERATED -eq 1 ]]; then
        return
    fi
    target_generation=$1
    for ((i = 0; i < "$target_generation"; i++)); do
        if [[ i -eq 0 ]]; then
            make
        else
            clean_assembly
            make selfhost COMPILER=bin/hcc$i OUTPUT=bin/hcc$((i + 1))
            ESC=$(printf '\033')
            printf "%s[32m✔%s[m" "${ESC}" "${ESC}"
            printf " 第%s世代のコンパイラが完成しました\n" "$((i + 1))"
        fi
    done
    COMPILER_GENERATED=1
    clean_assembly
}

param=()
opts=()
COMPILER_GENERATION=1
for OPT in "$@"; do
    case $OPT in
    -h | --help)
        display_help
        exit 1
        ;;
    -v | --verbose)
        opts+=(-v)
        shift 1
        ;;
    -O)
        opts+=(-O)
        shift 1
        ;;
    -g | --generation)
        if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
            echo "コンパイラの世代を指定してください"
            echo "  0   gcc"
            echo "  1   hcc"
            echo "  2   hcc2"
            echo "  3   coming soon..."
        fi
        COMPILER_GENERATION=$2
        shift 2
        ;;
    -*)
        echo "不正なオプションです"
        exit 1
        ;;
    *)
        if [[ -n "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
            param+=("$1")
            shift 1
        fi
        ;;
    esac
done

if [ "${param[0]}" = "clean" ] || [ "${param[0]}" = "cl" ]; then
    printf "不要な一時ファイルを消去します..."
    clean
    printf "done\n"
    exit 0
elif [ "${param[0]}" = "compile" ] || [ "${param[0]}" = "c" ]; then
    compile "${param[@]:1}"
elif [ "${param[0]}" = "src" ] || [ "${param[0]}" = "s" ]; then
    compile "${param[@]:1}"
    for fn in $(find . -name '*.s'); do
        printf "\n%s\n" "$(basename "$fn")"
        cat "$fn"
    done
elif [ "${param[0]}" = "exec" ] || [ "${param[0]}" = "e" ]; then
    generate_executable "${param[@]:1}"
    set +e
    ./a.out
    echo "結果: $?"
    set -e
elif [ "${param[0]}" = "debug" ]; then
    generate_executable "${param[@]:1}"
    gdb a.out
elif [ "${param[0]}" = "test" ] || [ "${param[0]}" = "t" ]; then
    runtest
else
    echo "存在しないサブコマンドです"
    exit 1
fi
