#!/bin/bash

# set -euo pipefail

testold() {
    i=$(basename $1)
    qfile=testold/question/$i
    afile=testold/answer/$i
    expected="$(cat $afile)"

    ./bin/exe.out $qfile
    cc -o tmp a.s # シンプルなテストなのでstaticをつけなくてもよい
    printf $qfile
    ./tmp
    actual="$?"
    if [ "$actual" = "$expected" ]; then
        printf "...passed\n"
    else
        printf "...failed\n"
        exit 1
    fi
}

test() {
    filename=$1
    ./bin/exe.out $filename
    cc -static -o tmp a.s
    printf $filename
    ./tmp
    if [ $? = 0 ]; then
        printf "...passed\n"
    else
        printf "...failed\n"
        result=1
    fi
}

if [ $# -eq 0 ]; then
    echo "引数なしでは実行できません"
    exit 1
fi

if [ $1 = "test" ]; then
    docker-compose run hooligan ./bin/hcc testv2dr
elif [ $1 = "src" ]; then
    docker-compose run hooligan ./bin/hcc srcdr "$2"
elif [ $1 = "srcdr" ]; then
    make
    ./bin/exe.out "$2"
    cat ./a.s
    rm tmp*
elif [ $1 = "exec" ]; then
    docker-compose run hooligan ./bin/hcc execdr "$2"
elif [ $1 = "execdr" ]; then
    make
    ./bin/exe.out "$2"
    cat ./a.s
    cc -static -o tmp a.s
    ./tmp
    echo "結果: $?"
    rm *.s
    rm tmp
elif [ $1 = "asm" ]; then
    docker-compose run hooligan ./bin/hcc asmdr "$2"
elif [ $1 = "asmdr" ]; then
    cc -static -c "$2" -o a.o
    objdump -d -M Intel a.o
    rm a.o tmp.c
elif [ $1 = "testold" ]; then
    docker-compose run hooligan ./bin/hcc testolddr
elif [ $1 = "testolddr" ]; then
    make
    for fn in testold/question/*; do
        testold $fn
    done
    rm *.s tmp
elif [ $1 = "testv2dr" ]; then
    make
    result=0
    for fn in test/*; do
        test $fn
    done
    rm *.s tmp
    exit $result
elif [ $1 = "testall" ]; then
    docker-compose run hooligan bash -c "./bin/hcc testv2dr && ./bin/hcc testolddr"
else
    echo "存在しないサブコマンドです"
    exit 1
fi
